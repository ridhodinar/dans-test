// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewGetAllJobsParams creates a new GetAllJobsParams object
//
// There are no default values defined in the spec.
func NewGetAllJobsParams() GetAllJobsParams {

	return GetAllJobsParams{}
}

// GetAllJobsParams contains all the bound params for the get all jobs operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetAllJobs
type GetAllJobsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	Description *string
	/*
	  In: query
	*/
	FullTime *string
	/*
	  In: query
	*/
	Location *string
	/*
	  In: query
	*/
	Page *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetAllJobsParams() beforehand.
func (o *GetAllJobsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDescription, qhkDescription, _ := qs.GetOK("description")
	if err := o.bindDescription(qDescription, qhkDescription, route.Formats); err != nil {
		res = append(res, err)
	}

	qFullTime, qhkFullTime, _ := qs.GetOK("full_time")
	if err := o.bindFullTime(qFullTime, qhkFullTime, route.Formats); err != nil {
		res = append(res, err)
	}

	qLocation, qhkLocation, _ := qs.GetOK("location")
	if err := o.bindLocation(qLocation, qhkLocation, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDescription binds and validates parameter Description from query.
func (o *GetAllJobsParams) bindDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Description = &raw

	return nil
}

// bindFullTime binds and validates parameter FullTime from query.
func (o *GetAllJobsParams) bindFullTime(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.FullTime = &raw

	return nil
}

// bindLocation binds and validates parameter Location from query.
func (o *GetAllJobsParams) bindLocation(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Location = &raw

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *GetAllJobsParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Page = &raw

	return nil
}
